@page "/client/updateclient/{id}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject IAlertService AlertService
@inject Gaby.Client.Services.Client.IClientService ClientService
@inject NavigationManager navManager
@inject Gaby.Client.Shared.PageHistoryState PageHistoryState

<h1>Editar cliente</h1>
<br />

<Form ButtonText="Actualizar cliente" client="@client" loading="@loading"
      OnValidSubmit="@_UpdateClient" />

@code {
    bool loading = false;

    [Parameter]
    public string Id { get; set; }

    MemberClient client = new MemberClient
    {
        Name = "",
        CheckInTime = default(TimeOnly),
        CheckOutTime = default(TimeOnly),
        Gender = Gender.Other,
        PhoneNumber = "",
        Active = true,
        Address = new Gaby.Shared.Utils.HomeAddress
        {
            MainSt = "",
            SecondarySt1 = "",
            SecondarySt2 = "",
            Community = "",
            Municipality = "",
            HouseNumber = -1
        },
        Ailments = "",
        Offers = new List<Offer>(),
        InscriptionDates = new List<InscriptionDate>()
    };

    protected async override Task OnParametersSetAsync()
    {
        client = await ClientService.GetClient(int.Parse(Id));
    }

    async Task _UpdateClient()
    {
        loading = true;
        try
        {
            await ClientService.UpdateClient(client);
            AlertService.Success("Cliente modificado satisfactoriamente", keepAfterRouteChange: true);
            if (PageHistoryState.CanGoBack())
            {
                navManager.NavigateTo(PageHistoryState.GetGoBackPage());
            }
            else
            {
                navManager.NavigateTo("/client/1");
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}