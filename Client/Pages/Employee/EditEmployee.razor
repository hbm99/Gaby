@page "/employee/editemployee/{id}"
@using Gaby.Shared.Model
@using Gaby.Client.Services.Employee
@inject ICoachService CoachService
@inject IMaintenanceEmployeeService MaintenanceEmployeeService
@inject ICleanerEmployeeService CleanerEmployeeService
@inject PageHistoryState PageHistoryState
@inject NavigationManager NavManager


<h4>Editando empleado...</h4>

<form>
    @if (employee == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <h4>Ficha</h4>
        <div class="row">
            <div class="form-group col-md-4">
                <label for="inputName1">Nombre y apellidos :</label>
                <input @bind="employee.Name" type="text" class="form-control" id="inputName1" placeholder="actual">
            </div>

            @if (coach != null)
            {
                <div class="form-group col-md-3">
                    <label for="inputBasicSalary1">Salario Básico (Opcional) :</label>
                    <input @bind="coach.BasicSalary" type="number" class="form-control" id="inputBasicSalary1" placeholder="actual">
                </div>
            }
            else if (maintenanceEmployee != null)
            {
                <div class="form-group col-md-3">
                    <label for="inputBasicSalary1">Salario Básico (Opcional) :</label>
                    <input @bind="maintenanceEmployee.BasicSalary" type="number" class="form-control" id="inputBasicSalary1" placeholder="actual">
                </div>
            }
            else if (cleanerEmployee != null)
            {
                <div class="form-group col-md-3">
                    <label for="inputBasicSalary1">Salario Básico (Opcional) :</label>
                    <input @bind="cleanerEmployee.BasicSalary" type="number" class="form-control" id="inputBasicSalary1" placeholder="actual">
                </div>
            }
            <div>
                <label for="space1"> </label>
            </div>

        </div>
        <button @onclick="EditWorker" type="button" class="btn btn-success">Editar</button>
    }
</form>

@code {
    [Parameter]
    public string Id { get; set; }

    Employee employee = null!;
    Coach coach = null!;
    MaintenanceEmployee maintenanceEmployee = null!;
    CleanerEmployee cleanerEmployee = null!;

    protected override async Task OnParametersSetAsync()
    {
        var coaches = await CoachService.Get(null);
        var maintenanceEmployees = await MaintenanceEmployeeService.Get(null);
        var cleanerEmployees = await CleanerEmployeeService.Get(null);
        
        foreach (var coach in coaches)
        {
            if (coach.EmployeeId != Id) continue;
            employee = coach;
            this.coach = coach;
            return;
        }
        foreach (var maintenanceEmployee in maintenanceEmployees)
        {
            if (maintenanceEmployee.EmployeeId != Id) continue;
            employee = maintenanceEmployee;
            this.maintenanceEmployee = maintenanceEmployee;
            return;
        }
        foreach (var cleanerEmployee in cleanerEmployees)
        {
            if (cleanerEmployee.EmployeeId != Id) continue;
            employee = cleanerEmployee;
            this.cleanerEmployee = cleanerEmployee;
        }
    }
    
    async Task EditWorker()
    {
        try
        {
            switch (employee)
            {
                case Coach:
                    await CoachService.UpdateEmployee(coach);
                    break;
                case MaintenanceEmployee:
                    await MaintenanceEmployeeService.UpdateEmployee(maintenanceEmployee);
                    break;
                case CleanerEmployee:
                    await CleanerEmployeeService.UpdateEmployee(cleanerEmployee);
                    break;
            }
            NavManager.NavigateTo(PageHistoryState.CanGoBack() ? PageHistoryState.GetGoBackPage() : "/employee");
        }
        catch (Exception ex)
        {
            StateHasChanged();
        }
    }
}
