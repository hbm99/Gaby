@page "/employee/viewemployee/{id}"
@using Gaby.Shared.Model
@using Gaby.Client.Services.Employee
@inject IEmployeeService EmployeeService
@inject ICoachService CoachService
@inject IMaintenanceEmployeeService MaintenanceEmployeeService
@inject ICleanerEmployeeService CleanerEmployeeService
@inject PageHistoryState PageHistoryState

<h4>Empleado</h4>
<br/>
@if (employee == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table col-md-6">
        <tbody>
        <tr>
            <th scope="row">Nombre</th>
            <td>@employee.Name</td>
        </tr>
        <tr>
            <th scope="row">Carnet de identidad</th>
            <td>@employee.EmployeeId</td>
        </tr>
        <tr>
            <th scope="row">Salario Básico :</th>
            <td>@basicSalary</td>
        </tr>
        @if (employee is not CleanerEmployee)
        {
            <tr>
                <th scope="row">Salario Extra :</th>
                <td>@extraSalary</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="form-group">
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Atrás</NavLink>
        }
        else {
            <NavLink href="/employee" class="btn btn-link">Atrás</NavLink>
        }
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    Employee employee = null!;
    decimal basicSalary;
    decimal extraSalary;

    protected override async Task OnParametersSetAsync()
    {
        var coaches = await CoachService.Get(null);
        var maintenanceEmployees = await MaintenanceEmployeeService.Get(null);
        var cleanerEmployees = await CleanerEmployeeService.Get(null);
        
        foreach (var coach in coaches)
        {
            if (coach.EmployeeId != Id) continue;
            employee = coach;
        }
        foreach (var maintenanceEmployee in maintenanceEmployees)
        {
            if (maintenanceEmployee.EmployeeId != Id) continue;
            employee = maintenanceEmployee;
        }
        foreach (var cleanerEmployee in cleanerEmployees)
        {
            if (cleanerEmployee.EmployeeId != Id) continue;
            employee = cleanerEmployee;
        }
        
        switch (employee)
        {
            case Coach trainer:
                basicSalary = trainer.BasicSalary;
                extraSalary = trainer.ExtraSalary;
                break;
            case MaintenanceEmployee maintenanceEmployee:
                basicSalary = maintenanceEmployee.BasicSalary;
                extraSalary = maintenanceEmployee.ExtraSalary;
                break;
            case CleanerEmployee cleanerEmployee:
                basicSalary = cleanerEmployee.BasicSalary;
                extraSalary = 0;
                break;
        }
    }
}
