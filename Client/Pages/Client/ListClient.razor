@page "/client/{Page}"
@using Gaby.Client.Services.Client
@using Gaby.Client.Services.SharedServices
@using Gaby.Shared.Model
@using Gaby.Shared.Pager
@inject IClientService ClientService
@inject IUserService UserService
@inject NavigationManager UriHelper
@inject PageHistoryState PageHistoryState

<PageTitle>Client</PageTitle>

<h4>Clientes</h4>
<br />

<form>
    <div class="row mb-3">
        <div class="col-md-7">
            @if (LoggedIn)
            {
                <NavLink href="/client/createclient" class="btn btn-sm btn-success mb-2">Añadir Cliente</NavLink>
            }
        </div>
        <div class="input-group col-md-5 text-md-right">
            <input name="ClientSearchInput" type="text" class="form-control" placeholder="Nombre" @bind="SearchTerm" @onkeyup="SearchBoxKeyPress" />
            <div class="input-group-btn">
                <button name="ClientSearchButton" class="btn btn-default" @onclick="SearchClick">
                    <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
                </button>
            </div>
            <div class="input-group-btn">
                <button name="ClientSearchClear" class="btn btn-default" @onclick="ClearSearch">
                    <i class="oi oi-x" title="clear" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>


    @if (clients == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th style="width:25%">Nombre</th>
                <th style="width:25%">Género</th>
                <th style="width:15%">Comunidad</th>
                <th style="width:30%">Teléfono</th>
                <th style="width:5%"></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var client in clients.Results)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.Gender</td>
                    <td>@client.Address.Community</td>
                    <td>@client.PhoneNumber</td>
                    <td style="white-space: nowrap">

                        <NavLink href="@($"/client/viewclient/{client.ClientId}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                        @if (LoggedIn)
                        {
                            <NavLink href="@($"/client/updateclient/{client.ClientId}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>

                            @if (client.Active == false)
                            {
                                <button @onclick="@(() => DeleteClient(client))" disabled="@client.Active" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span class="spinner-border spinner-border-sm"></span>
                                </button>
                            }
                            else
                            {
                                <button @onclick="@(() => DeleteClient(client))" disabled="@client.Active" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span></span>
                                </button>
                            }
                        }

                    </td>
                </tr>

            }
            </tbody>
        </table>
        <Pager Result=@clients PageChanged=PagerPageChanged />
    }
</form>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    
   
       
        
    protected PagedResult<MemberClient> clients;

    public bool LoggedIn => UserService.User != null;

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        clients = await ClientService.GetClients(null, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    { 
        if (string.IsNullOrEmpty(SearchTerm))
        {
            clients = await ClientService.GetClients(null, Page);
            return;
        }
        clients = await ClientService.GetClients(SearchTerm, Page);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        clients = await ClientService.GetClients(SearchTerm, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/client/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeleteClient(MemberClient _client)
    {
        var __client = _client;
        __client.Active = false;
        await ClientService.DeleteClient(__client.ClientId);
        clients = await ClientService.GetClients(null, Page);
        StateHasChanged();
    }
}

